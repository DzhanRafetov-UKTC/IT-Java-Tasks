
import java.util.*;

class Point
{
    int first, second;

    public Point(int first, int second)
    {
        this.first = first;
        this.second = second;
    }
}

class Main
{

    // Function to find the maximum sum `k × k` submatrix
    public static Point findMaxSumSubMatrix(int mat[][], int k)
    {
        // `M × N` matrix
        int M = mat.length;
        int N = mat[0].length;

        // preprocess the input matrix such that `sum[i][j]` stores
        // sum of elements in the matrix from `(0, 0)` to `(i, j)`
        int[][] sum = new int[M][N];
        sum[0][0] = mat[0][0];

        // preprocess the first row
        for (int j = 1; j < N; j++) {
            sum[0][j] = mat[0][j] + sum[0][j - 1];
        }

        // preprocess the first column
        for (int i = 1; i < M; i++) {
            sum[i][0] = mat[i][0] + sum[i - 1][0];
        }

        // preprocess the rest of the matrix
        for (int i = 1; i < M; i++)
        {
            for (int j = 1; j < N; j++)
            {
                sum[i][j] = mat[i][j] + sum[i - 1][j] + sum[i][j - 1]
                        - sum[i - 1][j - 1];
            }
        }

        int total, max = Integer.MIN_VALUE;
        Point p = null;

        // find the maximum sum submatrix

        // start from cell `(k-1, k-1)` and consider each
        // submatrix of size `k × k`
        for (int i = k - 1; i < M; i++)
        {
            for (int j = k - 1; j < N; j++)
            {
                // Note that `(i, j)` is the bottom-right corner coordinates of the
                // square submatrix of size `k`

                total = sum[i][j];
                if (i - k >= 0) {
                    total = total - sum[i - k][j];
                }

                if (j - k >= 0) {
                    total = total - sum[i][j - k];
                }

                if (i - k >= 0 && j - k >= 0) {
                    total = total + sum[i - k][j - k];
                }

                if (total > max)
                {
                    max = total;
                    p = new Point(i, j);
                }
            }
        }

        // returns coordinates of the bottom-right corner of the submatrix
        return p;
    }

    public static void main(String[] args)
    {
        // 5 × 5 matrix
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter the number of rows: ");
        int rows = sc.nextInt();
        System.out.print("Enter the number of columns: ");
        int cols = sc.nextInt();
        int[][] mat = new int[rows][cols];

        //Въвеждаме елементите
        System.out.println("Enter the elements of the array: ");


        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                mat[i][j] = sc.nextInt();


            }


        }
        String str = "          \t";//ФОРМАТИРВАМЕ

        System.out.println("Elements of the array are : ");
        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                str += mat[i][j] + "            ";//ФОРМАТИРВАМЕ
            }
            //ПРИНТИРАМЕ МАСИВА
            System.out.println(str );
            str = "          \t";
        }
       
        // submatrix size
        int k = 2;

        // `p` contains bottom-right corner coordinates of the submatrix
        Point p = findMaxSumSubMatrix(mat, k);

        // print maximum sum submatrix
        for (int i = 0; i < k; i++)
        {
            for (int j = 0; j < k; j++)
            {
                int r = i + p.first - k + 1;
                int c = j + p.second - k + 1;
                System.out.printf("%3d", mat[r][c]);
            }

            System.out.println();
        }
    }
}

